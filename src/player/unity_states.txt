using System;

public abstract class State
{
    protected Player player;
    protected int frame = 0;
    protected int gravityMax = 28;
    protected int gravityIncrement = 2;
    protected int runningMax = 12;
    protected int runningIncrement = 2;
    protected int glidingMax = 12;
    protected int glidingIncrement = 2;
    protected int crouchingMax = 4;
    protected int crouchingIncrement = 1;
    protected int slidingIncrement = 2;
    protected int divingMax = 48;
    protected int divingIncrement = 4;
    protected int jumpForce = 30;

    public void SetState(Player player)
    {
        this.player = player;
        frame = 0;
    }
    public abstract void trigger();

    public void increaseFrame(int frames)
    {
        frame++;
        if (frame == frames + 1)
        {
            frame = 1;
        }
    }
    public void enterRunning()
    {
        if (player.velocity.Item1 < -runningMax)
        {
            player.velocity = Tuple.Create(-runningMax, player.velocity.Item2);
        }
        else if (player.velocity.Item1 > runningMax)
        {
            player.velocity = Tuple.Create(runningMax, player.velocity.Item2);
        }
        player.changeState(new Running());
    }
    public void jump(int initForce)
    {
        player.velocity = Tuple.Create(player.velocity.Item1, initForce);
    }
    public void verticalMovement(int increment, int maxSpeed)
    {
        if (player.velocity.Item2 > -maxSpeed)
        {
            player.velocity = Tuple.Create(player.velocity.Item1, player.velocity.Item2 - increment);
        }
    }
    public void horizontalMovement(int increment, int maxSpeed)
    {
        if (player.velocity.Item1 % increment != 0)
        {
            player.velocity = Tuple.Create(player.velocity.Item1 + 1, player.velocity.Item2);
        }
        if (player.input.Item1 > 0 && player.velocity.Item1 < maxSpeed)
        {
            player.velocity = Tuple.Create(player.velocity.Item1 + increment, player.velocity.Item2);
        }
        else if (player.input.Item1 < 0 && player.velocity.Item1 > -maxSpeed)
        {
            player.velocity = Tuple.Create(player.velocity.Item1 - increment, player.velocity.Item2);
        }
        else if (player.input.Item1 == 0)
        {
            if (player.velocity.Item1 > 0)
            {
                player.velocity = Tuple.Create(player.velocity.Item1 - increment, player.velocity.Item2);
            }
            else if (player.velocity.Item1 < 0)
            {
                player.velocity = Tuple.Create(player.velocity.Item1 + increment, player.velocity.Item2);
            }
        }
    }

    public void translate()
    {
        player.checkForCollision();

        if (player.position.x >= 0)
        {
            if (player.position.x % 10 < 5)
            {
                player.roundedPosition.x = player.position.x - player.position.x % 10;
            }
            else
            {
                player.roundedPosition.x = player.position.x - player.position.x % 10 + 10;
            }
        }
        else
        {
            if (player.position.x % 10 > -5)
            {
                player.roundedPosition.x = player.position.x - player.position.x % 10;
            }
            else
            {
                player.roundedPosition.x = player.position.x - player.position.x % 10 - 10;
            }
        }

        if (player.position.x >= 0)
        {
            if (player.position.y % 10 < 5)
            {
                player.roundedPosition.y = player.position.y - player.position.y % 10;
            }
            else
            {
                player.roundedPosition.y = player.position.y - player.position.y % 10 + 10;
            }
        }
        else
        {
            if (player.position.y % 10 > -5)
            {
                player.roundedPosition.y = player.position.y - player.position.y % 10;
            }
            else
            {
                player.roundedPosition.y = player.position.y - player.position.y % 10 - 10;
            }
        }

        player.transform.position = player.position;
    }
}







using System;

class Sliding : State
{
    private int initDelay = 15;
    public override void trigger()
    {
        if (player.input.Item1 == 0 && player.input.Item2 == 0 && player.velocity.Item1 == 0 && player.velocity.Item2 == 0)
        {
            player.changeState(new Idle());
        }
        else if (player.input.Item2 > 0)
        {
            jump(jumpForce);
            player.changeState(new Gliding());
        }
        else if (player.velocity.Item2 != 0)
        {
            player.changeState(new Gliding());
        }
        else if ((player.input.Item1 != 0 && player.input.Item2 == 0) || (player.velocity.Item1 != 0 && player.input.Item2 == 0))
        {
            enterRunning();
        }
        else if (player.input.Item2 < 0 && player.velocity.Item1 <= crouchingMax && player.velocity.Item1 >= -crouchingMax)
        {
            player.changeState(new Crouching());
        }
        else
        {
            if (initDelay > 0)
            {
                initDelay--;
            }
            increaseFrame(8);
            if (player.velocity.Item1 > crouchingMax && initDelay == 0)
            {
                player.velocity = Tuple.Create(player.velocity.Item1 - slidingIncrement, player.velocity.Item2);
                initDelay = 5;
            }
            else if (player.velocity.Item1 < -crouchingMax && initDelay == 0)
            {
                player.velocity = Tuple.Create(player.velocity.Item1 + slidingIncrement, player.velocity.Item2);
                initDelay = 5;
            }
            verticalMovement(gravityIncrement, gravityMax);
            translate();
        }
    }
}





using System;
using System.Diagnostics;

class Running : State
{
    public override void trigger()
    {
        if (player.input.Item1 == 0 && player.input.Item2 == 0 && player.velocity.Item1 == 0 && player.velocity.Item2 == 0)
        {
            player.changeState(new Idle());
        }
        else if (player.input.Item2 > 0)
        {
            jump(jumpForce);
            player.changeState(new Gliding());
        }
        else if (player.velocity.Item2 != 0)
        {
            player.changeState(new Gliding());
        }
        else if (player.input.Item2 < 0 && (player.velocity.Item1 > crouchingMax || player.velocity.Item1 < -crouchingMax))
        {
            player.changeState(new Sliding());
        }
        else if (player.input.Item2 < 0 && player.velocity.Item1 <= crouchingMax && player.velocity.Item1 >= -crouchingMax)
        {
            player.changeState(new Crouching());
        }
        else
        {
            increaseFrame(8);
            horizontalMovement(runningIncrement, runningMax);
            verticalMovement(gravityIncrement, gravityMax);
            translate();
        }
    }
}



using System;

class Idle : State
{
    public override void trigger()
    {
        if (player.velocity.Item2 != 0)
        {
            player.changeState(new Gliding());
        }
        else if (player.input.Item2 > 0)
        {
            jump(jumpForce);
            player.changeState(new Gliding());
        }
        else if (player.input.Item1 != 0 && player.input.Item2 == 0)
        {
            enterRunning();
        }
        else if (player.input.Item2 < 0)
        {
            player.changeState(new Crouching());
        }
        else
        {
            increaseFrame(8);
            verticalMovement(gravityIncrement, gravityMax);
            translate();
        }
    }
}




using System;

class Gliding : State
{
    public override void trigger()
    {
        if (player.input.Item1 == 0 && player.input.Item2 == 0 && player.velocity.Item1 == 0 && player.velocity.Item2 == 0 && player.velocityLeftOver.Item2 < 0)
        {
            player.changeState(new Idle());
        }
        else if (player.input.Item1 != 0 && player.input.Item2 == 0 && player.velocity.Item2 == 0 && player.velocityLeftOver.Item2 < 0)
        {
            enterRunning();
        }
        else if (player.input.Item2 < 0 && (player.velocity.Item1 > crouchingMax || player.velocity.Item1 < -crouchingMax) && player.velocity.Item2 == 0 && player.velocityLeftOver.Item2 < 0)
        {
            if ((Math.Abs(player.velocityLeftOver.Item2) / 2 > player.velocity.Item1) && player.velocity.Item1 > 0)
            {
                player.velocity = Tuple.Create(Math.Abs(player.velocityLeftOver.Item2) / 2, player.velocity.Item2);
            }
            else if ((Math.Abs(player.velocityLeftOver.Item2) / 2 < player.velocity.Item1) && player.velocity.Item1 > 0)
            {
                player.velocity = Tuple.Create(player.velocity.Item1 + Math.Abs(player.velocityLeftOver.Item2) / 2, player.velocity.Item2);
            }
            else if ((-Math.Abs(player.velocityLeftOver.Item2) / 2 < player.velocity.Item1) && player.velocity.Item1 < 0)
            {
                player.velocity = Tuple.Create(-Math.Abs(player.velocityLeftOver.Item2) / 2, player.velocity.Item2);
            }
            else if ((-Math.Abs(player.velocityLeftOver.Item2) / 2 > player.velocity.Item1) && player.velocity.Item1 < 0)
            {
                player.velocity = Tuple.Create(player.velocity.Item1 - Math.Abs(player.velocityLeftOver.Item2) / 2, player.velocity.Item2);
            }
            player.changeState(new Sliding());
        }
        else if (player.input.Item2 < 0 && player.velocity.Item1 <= crouchingMax && player.velocity.Item1 >= -crouchingMax && player.velocity.Item2 == 0 && player.velocityLeftOver.Item2 < 0)
        {
            player.changeState(new Crouching());
        }
        else
        {
            if (player.velocityLeftOver.Item1 != 0 && Math.Abs(player.velocityLeftOver.Item1) > jumpForce)
            {
                player.velocity = Tuple.Create(player.velocity.Item1, Math.Abs(player.velocityLeftOver.Item1));
            }
            else if ((player.input.Item2 > 0 && player.velocity.Item2 == 0 && player.velocityLeftOver.Item2 < 0) || (player.velocityLeftOver.Item1 != 0 && Math.Abs(player.velocityLeftOver.Item1) < jumpForce && player.input.Item2 > 0))
            {
                jump(jumpForce);
            }
            if (player.input.Item2 < 0)
            {
                if (player.velocity.Item2 % divingIncrement != 0)
                {
                    player.velocity = Tuple.Create(player.velocity.Item1, player.velocity.Item2 - player.velocity.Item2 % divingIncrement);
                }
                verticalMovement(divingIncrement, divingMax);
            }
            else
            {
                verticalMovement(gravityIncrement, gravityMax);
            }

            increaseFrame(8);
            horizontalMovement(glidingIncrement, glidingMax);
            translate();
        }
    }
}



using System;

class Crouching : State
{
    public override void trigger()
    {
        if (player.input.Item1 == 0 && player.input.Item2 == 0 && player.velocity.Item1 == 0 && player.velocity.Item2 == 0)
        {
            player.changeState(new Idle());
        }
        else if (player.velocity.Item2 != 0)
        {
            player.changeState(new Gliding());
        }
        else if (player.input.Item2 > 0)
        {
            jump(jumpForce);
            player.changeState(new Gliding());
        }
        else if (player.input.Item1 != 0 && player.input.Item2 == 0)
        {
            player.changeState(new Running());
        }
        else
        {
            increaseFrame(8);
            horizontalMovement(crouchingIncrement, crouchingMax);
            verticalMovement(gravityIncrement, gravityMax);
            translate();
        }
    }
}



using System;
using Unity.Mathematics;
using UnityEngine;

public class Player : MonoBehaviour
{
    protected State state;
    public Vector2 position;
    public Vector2 roundedPosition;
    public Tuple<int, int> velocity;
    public Tuple<int, int> velocityLeftOver;
    public Tuple<int, int> input;

    PlayerInput player_input = new PlayerInput();

    void Start()
    {
        velocity = Tuple.Create(0, 0);
        velocityLeftOver = Tuple.Create(0, 0);
        position = new Vector2(-50, 50);
        //Time.timeScale = 0.02f;
        input = player_input.input(Input.GetKey(KeyCode.LeftArrow), Input.GetKey(KeyCode.RightArrow), Input.GetKey(KeyCode.Space), Input.GetKey(KeyCode.DownArrow));
        changeState(new Idle());
    }

    private void FixedUpdate()
    {
        state.trigger();
    }

    void Update()
    {
        input = player_input.input(Input.GetKey(KeyCode.LeftArrow), Input.GetKey(KeyCode.RightArrow), Input.GetKey(KeyCode.Space), Input.GetKey(KeyCode.DownArrow));
    }

    public void changeState(State state)
    {
        Debug.Log(state);
        this.state = state;
        this.state.SetState(this);
        if (this.state is Running)
        {
            transform.localScale = new Vector3(1, 0.7f, 1);
        }
        else if (this.state is Idle)
        {
            transform.localScale = new Vector3(1, 1, 1);
        }
        else if (this.state is Crouching)
        {
            transform.localScale = new Vector3(0.7f, 0.7f, 1);
        }
        else if (this.state is Sliding)
        {
            transform.localScale = new Vector3(1, 0.5f, 1);
        }
        else if (this.state is Gliding)
        {
            transform.localScale = new Vector3(0.7f, 1, 1);
        }
        this.state.trigger();
    }

    public void checkForCollision()
    {
        velocityLeftOver = Tuple.Create(0, 0);
        int initXVel = velocity.Item1;
        int initYVel = velocity.Item2;

        int x_change;
        int y_change;

        if (initXVel > 0)
        {
            initXVel += 1;
            x_change = 1;
        }
        else
        {
            initXVel -= 1;
            x_change = -1;
        }
        if (initYVel > 0)
        {
            initYVel += 1;
            y_change = 1;
        }
        else
        {
            initYVel -= 1;
            y_change = -1;
        }

        float ratio;
        
        if (initXVel == 0)
        {
            initXVel = 1;
        }
        if (initYVel == 0)
        {
            initYVel = 1;
        }
        ratio = initXVel / initYVel;

        Vector2 position_to_be = position + new Vector2(velocity.Item1, velocity.Item2);

        while (position != position_to_be)
        {
            var xEmpty = true;
            var yEmpty = true;

            if ((position.x + 50) % 100 == 0)
            {
                if ((position.y + 50) % 100 == 0)
                {
                    if (FindObjectOfType<World>().isEmpty(position.x + 100 * x_change, position.y))
                    {
                        xEmpty = false;
                    }
                }
                else
                {
                    if (position.y % 100 > 0)
                    {
                        if (position.y % 100 > 50)
                        {
                            if (FindObjectOfType<World>().isEmpty(position.x + 100 * x_change, position.y - position.y % 100 + 50) || FindObjectOfType<World>().isEmpty(position.x + 100 * x_change, position.y - position.y % 100 + 150))
                            {
                                xEmpty = false;
                            }
                        }
                        else
                        {
                            if (FindObjectOfType<World>().isEmpty(position.x + 100 * x_change, position.y - position.y % 100 + 50) || FindObjectOfType<World>().isEmpty(position.x + 100 * x_change, position.y - position.y % 100 - 50))
                            {
                                xEmpty = false;
                            }
                        }
                    }
                    else
                    {
                        if (position.y % 100 < -50)
                        {
                            if (FindObjectOfType<World>().isEmpty(position.x + 100 * x_change, position.y - position.y % 100 - 50) || FindObjectOfType<World>().isEmpty(position.x + 100 * x_change, position.y - position.y % 100 - 150))
                            {
                                xEmpty = false;
                            }
                        }
                        else
                        {
                            if (FindObjectOfType<World>().isEmpty(position.x + 100 * x_change, position.y - position.y % 100 + 50) || FindObjectOfType<World>().isEmpty(position.x + 100 * x_change, position.y - position.y % 100 - 50))
                            {
                                xEmpty = false;
                            }
                        }
                    }
                }

            }

            if ((position.y + 50) % 100 == 0)
            {
                if ((position.x + 50) % 100 == 0)
                {
                    if (FindObjectOfType<World>().isEmpty(position.x, position.y + 100 * y_change))
                    {
                        yEmpty = false;
                    }
                }
                else
                {
                    if (position.x % 100 > 0)
                    {
                        if (position.x % 100 > 50)
                        {
                            if (FindObjectOfType<World>().isEmpty(position.x - position.x % 100 + 50, position.y + 100 * y_change) || FindObjectOfType<World>().isEmpty(position.x - position.x % 100 + 150, position.y + 100 * y_change))
                            {
                                yEmpty = false;
                            }
                        }
                        else
                        {
                            if (FindObjectOfType<World>().isEmpty(position.x - position.x % 100 + 50, position.y + 100 * y_change) || FindObjectOfType<World>().isEmpty(position.x - position.x % 100 - 50, position.y + 100 * y_change))
                            {
                                yEmpty = false;
                            }
                        }
                    }
                    else
                    {
                        if (position.x % 100 < -50)
                        {
                            if (FindObjectOfType<World>().isEmpty(position.x - position.x % 100 - 50, position.y + 100 * y_change) || FindObjectOfType<World>().isEmpty(position.x - position.x % 100 - 150, position.y + 100 * y_change))
                            {
                                yEmpty = false;
                            }
                        }
                        else
                        {
                            if (FindObjectOfType<World>().isEmpty(position.x - position.x % 100 + 50, position.y + 100 * y_change) || FindObjectOfType<World>().isEmpty(position.x - position.x % 100 - 50, position.y + 100 * y_change))
                            {
                                yEmpty = false;
                            }
                        }
                    }
                }

            }

            if (xEmpty && yEmpty)
            {
                if (initXVel != x_change && initYVel != y_change)
                {
                    if (math.abs(ratio - (initXVel + x_change) / (initYVel + y_change)) < math.abs(ratio - (initXVel + x_change) / (initYVel)) && math.abs(ratio - (initXVel + x_change) / (initYVel + y_change)) < math.abs(ratio - (initXVel) / (initYVel + y_change)))
                    {
                        position.x += x_change;
                        initXVel -= x_change;
                        position.y += y_change;
                        initYVel -= y_change;
                    }
                    else if (math.abs(ratio - (initXVel + x_change) / (initYVel)) < math.abs(ratio - (initXVel + x_change) / (initYVel + y_change)) && math.abs(ratio - (initXVel + x_change) / (initYVel)) < math.abs(ratio - (initXVel) / (initYVel + y_change)))
                    {
                        position.x += x_change;
                        initXVel -= x_change;
                    }
                    else
                    {
                        position.y += y_change;
                        initYVel -= y_change;
                    }
                }
                else if (initXVel != x_change)
                {
                    position.x += x_change;
                    initXVel -= x_change;
                }
                else if (initYVel != y_change)
                {
                    position.y += y_change;
                    initYVel -= y_change;
                }
            }
            else if (xEmpty && initXVel != x_change)
            {
                position.x += x_change;
                initXVel -= x_change;
            }
            else if (yEmpty && initYVel != y_change)
            {
                position.y += y_change;
                initYVel -= y_change;
            }
            else
            {
                if (position.x != position_to_be.x)
                {
                    velocityLeftOver = Tuple.Create(velocity.Item1, velocityLeftOver.Item2);
                    velocity = Tuple.Create(0, velocity.Item2);
                }
                if (position.y != position_to_be.y)
                {
                    velocityLeftOver = Tuple.Create(velocityLeftOver.Item1, velocity.Item2);
                    velocity = Tuple.Create(velocity.Item1, 0);
                }
                break;
            }
        }
    }
}